<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.IdentityModel.Tokens.Jwt</name>
    </assembly>
    <members>
        <member name="T:System.IdentityModel.Tokens.Jwt.ClaimTypeMapping">
            <summary>
            Defines the inbound and outbound mapping for claim claim types from jwt to .net claim 
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.ClaimTypeMapping.#cctor">
            <summary>
            Initializes static members of the <see cref="T:System.IdentityModel.Tokens.Jwt.ClaimTypeMapping"/> class. 
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.ClaimTypeMapping.InboundClaimTypeMap">
            <summary>
            Gets the InboundClaimTypeMap used by JwtSecurityTokenHandler when producing claims from jwt. 
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.ClaimTypeMapping.OutboundClaimTypeMap">
            <summary>
            Gets the OutboundClaimTypeMap is used by JwtSecurityTokenHandler to shorten claim types when creating a jwt. 
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.Jwt.JsonClaimValueTypes">
            <summary>
            Constants for Json Web tokens.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JsonClaimValueTypes.Json">
            <summary>
            A URI that represents the JSON XML data type.
            </summary>
            <remarks>When mapping json to .Net Claim(s), if the value was not a string (or an enumeration of strings), the ClaimValue will serialized using the current JSON serializer, a property will be added with the .Net type and the ClaimTypeValue will be set to 'JsonClaimValueType'.</remarks>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JsonClaimValueTypes.JsonArray">
            <summary>
            A URI that represents the JSON array XML data type.
            </summary>
            <remarks>When mapping json to .Net Claim(s), if the value was not a string (or an enumeration of strings), the ClaimValue will serialized using the current JSON serializer, a property will be added with the .Net type and the ClaimTypeValue will be set to 'JsonClaimValueType'.</remarks>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JsonClaimValueTypes.JsonNull">
            <summary>
            A URI that represents the JSON null data type
            </summary>
            <remarks>When mapping json to .Net Claim(s), we use empty string to represent the claim value and set the ClaimValueType to JsonNull</remarks>
        </member>
        <member name="T:System.IdentityModel.Tokens.Jwt.Serializer">
            <summary>
            Delegate that can be set on <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Serializer"/> to control serialization of objects into JSON.
            </summary>
            <param name="obj">Object to serialize</param>
            <returns>The serialized object.</returns>
        </member>
        <member name="T:System.IdentityModel.Tokens.Jwt.Deserializer">
            <summary>
            Delegate that can be set on <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Deserializer"/> to control deserialization JSON into objects.
            </summary>
            <param name="obj">JSON to deserialize.</param>
            <param name="targetType">Type expected.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:System.IdentityModel.Tokens.Jwt.JsonExtensions">
            <summary>
            Dictionary extensions for serializations
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Serializer">
            <summary>
            Gets or sets a <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Serializer"/> to use when serializing objects to JSON.
            </summary>
            <exception cref="T:System.ArgumentNullException">If 'value' is null.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Deserializer">
            <summary>
            Gets or sets a <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Deserializer"/> to use when deserializing objects from JSON.
            </summary>
            <exception cref="T:System.ArgumentNullException">If 'value' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JsonExtensions.SerializeToJson(System.Object)">
            <summary>
            Serializes an object to JSON.
            </summary>
            <param name="value">The object to serialize</param>
            <returns>The object as JSON.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JsonExtensions.DeserializeFromJson``1(System.String)">
            <summary>
            Deserialzes JSON into an instance of type T.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="jsonString">The JSON to deserialze.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JsonExtensions.DeserializeJwtHeader(System.String)">
            <summary>
            Deserialzes JSON into an instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/>.
            </summary>
            <param name="jsonString">The JSON to deserialze.</param>
            <returns>A new instance <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/>.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JsonExtensions.DeserializeJwtPayload(System.String)">
            <summary>
            Deserialzes JSON into an instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/>.
            </summary>
            <param name="jsonString">The JSON to deserialze.</param>
            <returns>A new instance <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/>.</returns>
        </member>
        <member name="T:System.IdentityModel.Tokens.Jwt.JwtConstants">
            <summary>
            Constants for Json Web tokens.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtConstants.HeaderType">
            <summary>
            Short header type.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtConstants.HeaderTypeAlt">
            <summary>
            Long header type.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtConstants.TokenType">
            <summary>
            Short token type.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtConstants.TokenTypeAlt">
            <summary>
            Long token type.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtConstants.JsonCompactSerializationRegex">
            <summary>
            Token format: 'header.payload.signature'. Signature is optional, but '.' is required.
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.Jwt.JwtHeader">
            <summary>
            Initializes a new instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/> which contains JSON objects representing the cryptographic operations applied to the JWT and optionally any additional properties of the JWT. 
            The member names within the JWT Header are referred to as Header Parameter Names.
            <para>These names MUST be unique and the values must be <see cref="T:System.String"/>(s). The corresponding values are referred to as Header Parameter Values.</para>
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/> class. Default string comparer <see cref="P:System.StringComparer.Ordinal"/>.
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtHeader.#ctor(Microsoft.IdentityModel.Tokens.SigningCredentials)">
            <summary>
            Initializes a new instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/>.
            With the Header Parameters:
            <para>{ { typ, JWT }, { alg, SigningCredentials.Algorithm } }</para>
            </summary>
            <param name="signingCredentials"><see cref="P:System.IdentityModel.Tokens.Jwt.JwtHeader.SigningCredentials"/> used creating a JWS Compact JSON.</param>
            <exception cref="T:System.ArgumentNullException">If 'signingCredentials' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtHeader.#ctor(Microsoft.IdentityModel.Tokens.SigningCredentials,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/>.
            With the Header Parameters:
            <para>{ { typ, JWT }, { alg, SigningCredentials.Algorithm } }</para>
            </summary>
            <param name="signingCredentials"><see cref="P:System.IdentityModel.Tokens.Jwt.JwtHeader.SigningCredentials"/> used when creating a JWS Compact JSON.</param>
            <param name="outboundAlgorithmMap">provides a mapping for the 'alg' value so that values are within the JWT namespace.</param>
            <exception cref="T:System.ArgumentNullException">If 'signingCredentials' is null.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtHeader.Alg">
            <summary>
            Gets the signature algorithm that was used to create the signature.
            </summary>
            <remarks>If the signature algorithm is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtHeader.SigningCredentials">
            <summary>
            Gets the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtHeader.SigningCredentials"/> passed in the constructor.
            </summary>
            <remarks>This value may be null.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtHeader.Typ">
            <summary>
            Gets the mime type (Typ) of the token.
            </summary>
            <remarks>If the mime type is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtHeader.Kid">
            <summary>
            Gets the key identifier for the security key used to sign the token
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtHeader.X5t">
            <summary>
            Gets the thhumbprint of the certificate used to sign the token
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtHeader.SerializeToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>This instance as JSON.</returns>
            <remarks>Use <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Serializer"/> to customize JSON serialization.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtHeader.Base64UrlEncode">
            <summary>
            Encodes this instance as Base64UrlEncoded JSON.
            </summary>
            <returns>Base64UrlEncoded JSON.</returns>
            <remarks>Use <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Serializer"/> to customize JSON serialization.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtHeader.Base64UrlDeserialize(System.String)">
            <summary>
            Deserializes Base64UrlEncoded JSON into a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/> instance.
            </summary>
            <param name="base64UrlEncodedJsonString">Base64url encoded JSON to deserialize.</param>
            <returns>An instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/>.</returns>
            <remarks>Use <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Deserializer"/> to customize JSON serialization.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtHeader.Deserialize(System.String)">
            <summary>
            Deserialzes JSON into a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/> instance.
            </summary>
            <param name="jsonString"> The JSON to deserialize.</param>
            <returns>An instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/>.</returns>
            <remarks>Use <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Deserializer"/> to customize JSON serialization.</remarks>
        </member>
        <member name="T:System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames">
            <summary>
            List of header parameter names see: http://tools.ietf.org/html/rfc7519#section-5.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Alg">
            <summary>
            see:http://tools.ietf.org/html/rfc7519#section-5
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Cty">
            <summary>
            see:http://tools.ietf.org/html/rfc7519#section-5
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Kid">
            <summary>
            see:http://tools.ietf.org/html/rfc7519#section-5
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Jku">
            <summary>
            see:http://tools.ietf.org/html/rfc7519#section-5
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Jwk">
            <summary>
            see:http://tools.ietf.org/html/rfc7519#section-5
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Typ">
            <summary>
            see:http://tools.ietf.org/html/rfc7519#section-5
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.X5c">
            <summary>
            see:http://tools.ietf.org/html/rfc7519#section-5
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.X5t">
            <summary>
            see:http://tools.ietf.org/html/rfc7519#section-5
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.X5u">
            <summary>
            see:http://tools.ietf.org/html/rfc7519#section-5
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.Jwt.JwtPayload">
            <summary>
            Initializes a new instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/> which contains JSON objects representing the claims contained in the JWT. Each claim is a JSON object of the form { Name, Value }.
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/> class with no claims. Default string comparer <see cref="P:System.StringComparer.Ordinal"/>. 
            Creates a empty <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/>
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/> class with <see cref="T:System.Collections.Generic.IEnumerable`1"/>. Default string comparer <see cref="P:System.StringComparer.Ordinal"/>.
            <param name="claims">The claims to add.</param>
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/> class with claims added for each parameter specified. Default string comparer <see cref="P:System.StringComparer.Ordinal"/>. 
            </summary>
            <param name="issuer">If this value is not null, a { iss, 'issuer' } claim will be added.</param>
            <param name="audience">If this value is not null, a { aud, 'audience' } claim will be added</param>
            <param name="claims">If this value is not null then for each <see cref="T:System.Security.Claims.Claim"/> a { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
            <param name="notBefore">If notbefore.HasValue is 'true' a { nbf, 'value' } claim is added.</param>
            <param name="expires">If expires.HasValue is 'true' a { exp, 'value' } claim is added.</param>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtPayload.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/> class with claims added for each parameter specified. Default string comparer <see cref="P:System.StringComparer.Ordinal"/>. 
            </summary>
            <param name="issuer">If this value is not null, a { iss, 'issuer' } claim will be added.</param>
            <param name="audience">If this value is not null, a { aud, 'audience' } claim will be added</param>
            <param name="claims">If this value is not null then for each <see cref="T:System.Security.Claims.Claim"/> a { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
            <param name="notBefore">If notbefore.HasValue is 'true' a { nbf, 'value' } claim is added.</param>
            <param name="expires">If expires.HasValue is 'true' a { exp, 'value' } claim is added.</param>
            <param name="issuedAt">If issuedAt.HasValue is 'true' a { iat, 'value' } claim is added.</param>
            <remarks>Comparison is set to <see cref="P:System.StringComparer.Ordinal"/>
            <para>The 4 parameters: 'issuer', 'audience', 'notBefore', 'expires' take precednece over <see cref="T:System.Security.Claims.Claim"/>(s) in 'claims'. The values in 'claims' will be overridden.</para></remarks>
            <exception cref="T:System.ArgumentException">If 'expires' &lt;= 'notbefore'.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Actort">
            <summary>
            Gets the 'value' of the 'actor' claim { actort, 'value' }.
            </summary>
            <remarks>If the 'actor' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Acr">
            <summary>
            Gets the 'value' of the 'acr' claim { acr, 'value' }.
            </summary>
            <remarks>If the 'acr' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Amr">
            <summary>
            Gets the 'value' of the 'amr' claim { amr, 'value' } as list of strings.
            </summary>
            <remarks>If the 'amr' claim is not found, an empty enumerable is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.AuthTime">
            <summary>
            Gets the 'value' of the 'auth_time' claim { auth_time, 'value' }.
            </summary>
            <remarks>If the 'auth_time' claim is not found OR could not be converted to <see cref="T:System.Int32"/>, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Aud">
            <summary>
            Gets the 'value' of the 'audience' claim { aud, 'value' } as a list of strings.
            </summary>
            <remarks>If the 'audience' claim is not found, an empty enumerable is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Azp">
            <summary>
            Gets the 'value' of the 'azp' claim { azp, 'value' }.
            </summary>
            <remarks>If the 'azp' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.CHash">
            <summary>
            Gets 'value' of the 'c_hash' claim { c_hash, 'value' }.
            </summary>
            <remarks>If the 'c_hash' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Exp">
            <summary>
            Gets the 'value' of the 'expiration' claim { exp, 'value' }.
            </summary>
            <remarks>If the 'expiration' claim is not found OR could not be converted to <see cref="T:System.Int32"/>, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Jti">
            <summary>
            Gets the 'value' of the 'JWT ID' claim { jti, 'value' }.
            </summary>
            <remarks>If the 'JWT ID' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Iat">
            <summary>
            Gets the 'value' of the 'Issued At' claim { iat, 'value' }.
            </summary>
            <remarks>If the 'Issued At' claim is not found OR cannot be converted to <see cref="T:System.Int32"/> null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Iss">
            <summary>
            Gets the 'value' of the 'issuer' claim { iss, 'value' }.
            </summary>
            <remarks>If the 'issuer' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Nbf">
            <summary>
            Gets the 'value' of the 'expiration' claim { nbf, 'value' }.
            </summary>
            <remarks>If the 'notbefore' claim is not found OR could not be converted to <see cref="T:System.Int32"/>, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Nonce">
            <summary>
            Gets the 'value' of the 'nonce' claim { nonce, 'value' }.
            </summary>
            <remarks>If the 'nonce' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Sub">
            <summary>
            Gets the 'value' of the 'subject' claim { sub, 'value' }.
            </summary>
            <remarks>If the 'subject' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.ValidFrom">
            <summary>
            Gets the 'value' of the 'notbefore' claim { nbf, 'value' } converted to a <see cref="T:System.DateTime"/> assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
            <remarks>If the 'notbefore' claim is not found, then <see cref="F:System.DateTime.MinValue"/> is returned. Time is returned as UTC.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.ValidTo">
            <summary>
            Gets the 'value' of the 'expiration' claim { exp, 'value' } converted to a <see cref="T:System.DateTime"/> assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
            <remarks>If the 'expiration' claim is not found, then <see cref="F:System.DateTime.MinValue"/> is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Claims">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/><see cref="T:System.Security.Claims.Claim"/> for each JSON { name, value }.
            </summary>
            <remarks>Each <see cref="T:System.Security.Claims.Claim"/>(s) returned will have the <see cref="P:System.Security.Claims.Claim.Type"/> translated according to the mapping found in <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap"/>. Adding and removing to <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap"/> will affect the value of the <see cref="P:System.Security.Claims.Claim.Type"/>.
            <para><see cref="P:System.Security.Claims.Claim.Issuer"/> and <see cref="P:System.Security.Claims.Claim.OriginalIssuer"/> will be set to the value of <see cref="P:System.IdentityModel.Tokens.Jwt.JwtPayload.Iss"/> ( <see cref="F:System.String.Empty"/> if null).</para></remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtPayload.AddClaim(System.Security.Claims.Claim)">
            <summary>
            Adds a JSON object representing the <see cref="T:System.Security.Claims.Claim"/> to the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/>
            </summary>
            <param name="claim">{ 'Claim.Type', 'Claim.Value' } is added. If a JSON object is found with the name == <see cref="P:System.Security.Claims.Claim.Type"/> then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
            <remarks>See <see cref="M:System.IdentityModel.Tokens.Jwt.JwtPayload.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})"/> For details on how <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap"/> is applied.</remarks>
            <exception cref="T:System.ArgumentNullException">'claim' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtPayload.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Adds a number of <see cref="T:System.Security.Claims.Claim"/> to the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/> as JSON { name, value } pairs.
            </summary>
            <param name="claims">For each <see cref="T:System.Security.Claims.Claim"/> a JSON pair { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
            <remarks>
            <para>Any <see cref="T:System.Security.Claims.Claim"/> in the <see cref="T:System.Collections.Generic.IEnumerable`1"/> that is null, will be ignored.</para></remarks>
            <exception cref="T:System.ArgumentNullException">'claims' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtPayload.GetDateTime(System.String)">
            <summary>
            Gets the DateTime using the number of seconds from 1970-01-01T0:0:0Z (UTC)
            </summary>
            <param name="key">Claim in the payload that should map to an integer.</param>
            <remarks>If the claim is not found, the function returns: DateTime.MinValue
            </remarks>
            <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenException">If an overflow exception is thrown by the runtime.</exception>
            <returns>The DateTime representation of a claim.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtPayload.SerializeToJson">
            <summary>
            Serializes this instance to JSON.
            </summary>
            <returns>This instance as JSON.</returns>
            <remarks>Use <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Serializer"/> to customize JSON serialization.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtPayload.Base64UrlEncode">
            <summary>
            Encodes this instance as Base64UrlEncoded JSON.
            </summary>
            <returns>Base64UrlEncoded JSON.</returns>
            <remarks>Use <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Serializer"/> to customize JSON serialization.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtPayload.Base64UrlDeserialize(System.String)">
            <summary>
            Deserializes Base64UrlEncoded JSON into a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/> instance.
            </summary>
            <param name="base64UrlEncodedJsonString">base64url encoded JSON to deserialize.</param>
            <returns>An instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/>.</returns>
            <remarks>Use <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Deserializer"/> to customize JSON serialization.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtPayload.Deserialize(System.String)">
            <summary>
            Deserialzes JSON into a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/> instance.
            </summary>
            <param name="jsonString">The JSON to deserialize.</param>
            <returns>An instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/>.</returns>
            <remarks>Use <see cref="P:System.IdentityModel.Tokens.Jwt.JsonExtensions.Deserializer"/> to customize JSON serialization.</remarks>
        </member>
        <member name="T:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames">
            <summary>
            List of registered claims from different sources
            http://tools.ietf.org/html/rfc7519#section-4
            http://openid.net/specs/openid-connect-core-1_0.html#IDToken
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Actort">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Acr">
            <summary>
            http://openid.net/specs/openid-connect-core-1_0.html#IDToken
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Amr">
            <summary>
            http://openid.net/specs/openid-connect-core-1_0.html#IDToken
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Aud">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.AuthTime">
            <summary>
            http://openid.net/specs/openid-connect-core-1_0.html#IDToken
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Azp">
            <summary>
            http://openid.net/specs/openid-connect-core-1_0.html#IDToken
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Birthdate">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.CHash">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.AtHash">
            <summary>
            http://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Email">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Exp">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Gender">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.FamilyName">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.GivenName">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Iat">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Iss">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Jti">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.NameId">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Nonce">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Nbf">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Prn">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Sid">
            <summary>
            http://openid.net/specs/openid-connect-frontchannel-1_0.html#OPLogout
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Sub">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Typ">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.UniqueName">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Website">
            <summary>
            http://tools.ietf.org/html/rfc7519#section-4
            </summary>
        </member>
        <member name="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken">
            <summary>
            A <see cref="T:Microsoft.IdentityModel.Tokens.SecurityToken"/> designed for representing a JSON Web Token (JWT).
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> from a string in JWS Compact serialized format.
            </summary>
            <param name="jwtEncodedString">A JSON Web Token that has been serialized in JWS Compact serialized format.</param>
            <exception cref="T:System.ArgumentNullException">'jwtEncodedString' is null.</exception>
            <exception cref="T:System.ArgumentException">'jwtEncodedString' contains only whitespace.</exception>
            <exception cref="T:System.ArgumentException">'jwtEncodedString' is not in JWS Compact serialized format.</exception>
            <remarks>
            The contents of this <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> have not been validated, the JSON Web Token is simply decoded. Validation can be accomplished using <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateToken(System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters,Microsoft.IdentityModel.Tokens.SecurityToken@)"/>
            </remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.#ctor(System.IdentityModel.Tokens.Jwt.JwtHeader,System.IdentityModel.Tokens.Jwt.JwtPayload,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> class where the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/> contains the crypto algorithms applied to the encoded <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/> and <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/>. The jwtEncodedString is the result of those operations.
            </summary>
            <param name="header">Contains JSON objects representing the cryptographic operations applied to the JWT and optionally any additional properties of the JWT</param>
            <param name="payload">Contains JSON objects representing the claims contained in the JWT. Each claim is a JSON object of the form { Name, Value }</param>
            <param name="rawHeader">base64urlencoded JwtHeader</param>
            <param name="rawPayload">base64urlencoded JwtPayload</param>
            <param name="rawSignature">base64urlencoded JwtSignature</param>
            <exception cref="T:System.ArgumentNullException">'header' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'payload' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'rawSignature' is null.</exception>
            <exception cref="T:System.ArgumentException">'rawHeader' or 'rawPayload' is null or whitespace.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.#ctor(System.IdentityModel.Tokens.Jwt.JwtHeader,System.IdentityModel.Tokens.Jwt.JwtPayload)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> class where the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/> contains the crypto algorithms applied to the encoded <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/> and <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/>. The jwtEncodedString is the result of those operations.
            </summary>
            <param name="header">Contains JSON objects representing the cryptographic operations applied to the JWT and optionally any additional properties of the JWT</param>
            <param name="payload">Contains JSON objects representing the claims contained in the JWT. Each claim is a JSON object of the form { Name, Value }</param>
            <exception cref="T:System.ArgumentNullException">'header' is null.</exception>
            <exception cref="T:System.ArgumentNullException">'payload' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> class specifying optional parameters.
            </summary>
            <param name="issuer">If this value is not null, a { iss, 'issuer' } claim will be added.</param>
            <param name="audience">If this value is not null, a { aud, 'audience' } claim will be added</param>
            <param name="claims">If this value is not null then for each <see cref="T:System.Security.Claims.Claim"/> a { 'Claim.Type', 'Claim.Value' } is added. If duplicate claims are found then a { 'Claim.Type', List&lt;object&gt; } will be created to contain the duplicate values.</param>
            <param name="expires">If expires.HasValue a { exp, 'value' } claim is added.</param>
            <param name="notBefore">If notbefore.HasValue a { nbf, 'value' } claim is added.</param>
            <param name="signingCredentials">The <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningCredentials"/> that will be used to sign the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>. See <see cref="M:System.IdentityModel.Tokens.Jwt.JwtHeader.#ctor(Microsoft.IdentityModel.Tokens.SigningCredentials)"/> for details pertaining to the Header Parameter(s).</param>
            <exception cref="T:System.ArgumentException">If 'expires' &lt;= 'notbefore'.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.Actor">
            <summary>
            Gets the 'value' of the 'actor' claim { actort, 'value' }.
            </summary>
            <remarks>If the 'actor' claim is not found, null is returned.</remarks> 
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.Audiences">
            <summary>
            Gets the list of 'audience' claim { aud, 'value' }.
            </summary>
            <remarks>If the 'audience' claim is not found, enumeration will be empty.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.Claims">
            <summary>
            Gets the <see cref="T:System.Security.Claims.Claim"/>(s) for this token.
            </summary>
            <remarks><para><see cref="T:System.Security.Claims.Claim"/>(s) returned will NOT have the <see cref="P:System.Security.Claims.Claim.Type"/> translated according to <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap"/></para></remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.EncodedHeader">
            <summary>
            Gets the Base64UrlEncoded <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/> associated with this instance.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.EncodedPayload">
            <summary>
            Gets the Base64UrlEncoded <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/> associated with this instance.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.Header">
            <summary>
            Gets the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/> associated with this instance.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.Id">
            <summary>
            Gets the 'value' of the 'JWT ID' claim { jti, ''value' }.
            </summary>
            <remarks>If the 'JWT ID' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.Issuer">
            <summary>
            Gets the 'value' of the 'issuer' claim { iss, 'value' }.
            </summary>
            <remarks>If the 'issuer' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.Payload">
            <summary>
            Gets the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/> associated with this instance.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawData">
            <summary>
            Gets the original raw data of this instance when it was created.
            </summary>
            <remarks>The original JSON Compact serialized format passed to one of the two constructors <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.#ctor(System.String)"/>
            or <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.#ctor(System.IdentityModel.Tokens.Jwt.JwtHeader,System.IdentityModel.Tokens.Jwt.JwtPayload,System.String,System.String,System.String)"/></remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawHeader">
            <summary>
            Gets the original raw data of this instance when it was created.
            </summary>
            <remarks>The original JSON Compact serialized format passed to one of the two constructors <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.#ctor(System.String)"/>
            or <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.#ctor(System.IdentityModel.Tokens.Jwt.JwtHeader,System.IdentityModel.Tokens.Jwt.JwtPayload,System.String,System.String,System.String)"/></remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawPayload">
            <summary>
            Gets the original raw data of this instance when it was created.
            </summary>
            <remarks>The original JSON Compact serialized format passed to one of the two constructors <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.#ctor(System.String)"/>
            or <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.#ctor(System.IdentityModel.Tokens.Jwt.JwtHeader,System.IdentityModel.Tokens.Jwt.JwtPayload,System.String,System.String,System.String)"/></remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawSignature">
            <summary>
            Gets the original raw data of this instance when it was created.
            </summary>
            <remarks>The original JSON Compact serialized format passed to one of the two constructors <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.#ctor(System.String)"/>
            or <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.#ctor(System.IdentityModel.Tokens.Jwt.JwtHeader,System.IdentityModel.Tokens.Jwt.JwtPayload,System.String,System.String,System.String)"/></remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SecurityKey">
            <summary>
            Gets the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SecurityKey"/>s for this instance.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SignatureAlgorithm">
            <summary>
            Gets the signature algorithm associated with this instance.
            </summary>
            <remarks>If there is a <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningCredentials"/> associated with this instance, a value will be returned.  Null otherwise.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningCredentials">
            <summary>
            Gets the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningCredentials"/> associated with this instance.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningKey">
            <summary>
            Gets or sets the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SecurityKey"/> that signed this instance.
            </summary>
            <remarks><see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler"/>.ValidateSignature(...) sets this value when a <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SecurityKey"/> is used to successfully validate a signature.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.Subject">
            <summary>
            Gets the "value" of the 'subject' claim { sub, 'value' }.
            </summary>
            <remarks>If the 'subject' claim is not found, null is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.ValidFrom">
            <summary>
            Gets the 'value' of the 'notbefore' claim { nbf, 'value' } converted to a <see cref="T:System.DateTime"/> assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
            <remarks>If the 'notbefore' claim is not found, then <see cref="F:System.DateTime.MinValue"/> is returned.</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.ValidTo">
            <summary>
            Gets the 'value' of the 'expiration' claim { exp, 'value' } converted to a <see cref="T:System.DateTime"/> assuming 'value' is seconds since UnixEpoch (UTC 1970-01-01T0:0:0Z).
            </summary>
            <remarks>If the 'expiration' claim is not found, then <see cref="F:System.DateTime.MinValue"/> is returned.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.ToString">
            <summary>
            Serializes the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/> and <see cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/>
            </summary>
            <returns>A string containing the header and payload in JSON format</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.Decode(System.String)">
            <summary>
            Decodes the string into the header, payload and signature
            </summary>
            <param name="jwtEncodedString">Base64Url encoded string.</param>
        </member>
        <member name="T:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler">
            <summary>
            A <see cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenHandler"/> designed for creating and validating Json Web Tokens. See: http://tools.ietf.org/html/rfc7519 and http://www.rfc-editor.org/info/rfc7515
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultTokenLifetimeInMinutes">
            <summary>
            Default lifetime of tokens created. When creating tokens, if 'expires' and 'notbefore' are both null, then a default will be set to: expires = DateTime.UtcNow, notbefore = DateTime.UtcNow + TimeSpan.FromMinutes(TokenLifetimeInMinutes).
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultInboundClaimTypeMap">
            <summary>
            Default claim type mapping for inbound claims.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultOutboundClaimTypeMap">
            <summary>
            Default claim type maping for outbound claims.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultInboundClaimFilter">
            <summary>
            Default claim type filter list.
            </summary>
        </member>
        <member name="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultOutboundAlgorithmMap">
            <summary>
            Default JwtHeader algorithm mapping
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.#cctor">
            <summary>
            Static initializer for a new object. Static initializers run before the first instance of the type is created.
            </summary>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler"/> class.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap">
            <summary>
            Gets or sets the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap"/> which is used when setting the <see cref="P:System.Security.Claims.Claim.Type"/> for claims in the <see cref="T:System.Security.Claims.ClaimsPrincipal"/> extracted when validating a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>. 
            <para>The <see cref="P:System.Security.Claims.Claim.Type"/> is set to the JSON claim 'name' after translating using this mapping.</para>
            <para>The default value is ClaimTypeMapping.InboundClaimTypeMap</para>
            </summary>
            <exception cref="T:System.ArgumentNullException">'value is null.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap">
            <summary>
            <para>Gets or sets the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap"/> which is used when creating a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> from <see cref="T:System.Security.Claims.Claim"/>(s).</para>
            <para>The JSON claim 'name' value is set to <see cref="P:System.Security.Claims.Claim.Type"/> after translating using this mapping.</para>
            <para>The default value is ClaimTypeMapping.OutboundClaimTypeMap</para>
            </summary>
            <remarks>This mapping is applied only when using <see cref="M:System.IdentityModel.Tokens.Jwt.JwtPayload.AddClaim(System.Security.Claims.Claim)"/> or <see cref="M:System.IdentityModel.Tokens.Jwt.JwtPayload.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})"/>. Adding values directly will not result in translation.</remarks>
            <exception cref="T:System.ArgumentNullException">'value' is null.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundAlgorithmMap">
            <summary>
            Gets the outbound algorithm map that is passed to the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/> constructor.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimFilter">
            <summary>Gets or sets the <see cref="T:System.Collections.Generic.ISet`1"/> used to filter claims when populating a <see cref="T:System.Security.Claims.ClaimsIdentity"/> claims form a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>.
            When a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> is validated, claims with types found in this <see cref="T:System.Collections.Generic.ISet`1"/> will not be added to the <see cref="T:System.Security.Claims.ClaimsIdentity"/>.
            <para>The default value is ClaimTypeMapping.InboundClaimFliter</para>
            </summary>
            <exception cref="T:System.ArgumentNullException">'value' is null.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ShortClaimTypeProperty">
            <summary>
            Gets or sets the property name of <see cref="P:System.Security.Claims.Claim.Properties"/> the will contain the original JSON claim 'name' if a mapping occurred when the <see cref="T:System.Security.Claims.Claim"/>(s) were created.
            <para>See <seealso cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap"/> for more information.</para>
            </summary>
            <exception cref="T:System.ArgumentException">If <see cref="T:System.String"/>.IsIsNullOrWhiteSpace('value') is true.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.JsonClaimTypeProperty">
            <summary>
            Gets or sets the property name of <see cref="P:System.Security.Claims.Claim.Properties"/> the will contain .Net type that was recogninzed when JwtPayload.Claims serialized the value to JSON.
            <para>See <seealso cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.InboundClaimTypeMap"/> for more information.</para>
            </summary>
            <exception cref="T:System.ArgumentException">If <see cref="T:System.String"/>.IsIsNullOrWhiteSpace('value') is true.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CanValidateToken">
            <summary>
            Returns 'true' which indicates this instance can validate a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>.
            </summary>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CanWriteToken">
            <summary>
            Gets a value indicating whether the class provides serialization functionality to serialize token handled 
            by this instance.
            </summary>
            <returns>true if the WriteToken method can serialize this token.</returns>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.TokenLifetimeInMinutes">
            <summary>
            Gets or sets the token lifetime in minutes.
            </summary>
            <remarks>Used by <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateToken(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor)"/> to set the default expiration ('exp'). <see cref="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultTokenLifetimeInMinutes"/> for the default.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">'value' less than 1.</exception>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.TokenType">
            <summary>
            Gets the type of the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>.
            </summary>
            <return>The type of <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/></return>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.MaximumTokenSizeInBytes">
            <summary>
            Gets and sets the maximum size in bytes, that a will be processed.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">'value' less than 1.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CanReadToken(System.String)">
            <summary>
            Determines if the string is a well formed Json Web token (see: http://tools.ietf.org/html/rfc7519 )
            </summary>
            <param name="tokenString">String that should represent a valid JSON Web Token.</param>
            <remarks>Uses <see cref="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)"/>( token, @"^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$" ).
            </remarks>
            <returns>
            <para>'true' if the token is in JSON compact serialization format.</para>
            <para>'false' if token.Length * 2 >  <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.MaximumTokenSizeInBytes"/>.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">'tokenString' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor)">
            <summary>
            Returns a Json Web Token (JWT).
            </summary>
            <param name="tokenDescriptor">A <see cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor"/> that contains details of contents of the token.</param>
            <remarks><see cref="P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials"/> is used to sign the JSON.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedJwt(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials)">
            <summary>
            Creates a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>
            </summary>
            <param name="issuer">The issuer of the token.</param>
            <param name="audience">The audience for this token.</param>
            <param name="subject">The source of the <see cref="T:System.Security.Claims.Claim"/>(s) for this token.</param>
            <param name="notBefore">The notbefore time for this token.</param>
            <param name="expires">The expiration time for this token.</param>
            <param name="issuedAt">The issue time for this token.</param>
            <param name="signingCredentials">Contains cryptographic material for generating a signature.</param>
            <remarks>If <see cref="P:System.Security.Claims.ClaimsIdentity.Actor"/> is not null, then a claim { actort, 'value' } will be added to the payload. <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)"/> for details on how the value is created.
            <para>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/> for details on how the HeaderParameters are added to the header.</para>
            <para>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/> for details on how the values are added to the payload.</para>
            <para>Each <see cref="T:System.Security.Claims.Claim"/> on the <paramref name="subject"/> added will have <see cref="P:System.Security.Claims.Claim.Type"/> translated according to the mapping found in
            <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap"/>. Adding and removing to <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap"/> will affect the name component of the Json claim.</para>
            <para><see cref="M:Microsoft.IdentityModel.Tokens.SigningCredentials.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)"/> is used to sign the JSON.</para>
            </remarks>
            <returns>A <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>.</returns>
            <exception cref="T:System.ArgumentException">If 'expires' &lt;= 'notBefore'.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateJwtSecurityToken(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor)">
            <summary>
            Creates a Json Web Token (JWT).
            </summary>
            <param name="tokenDescriptor"> A <see cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor"/> that contains details of contents of the token.</param>
            <remarks><see cref="P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials"/> is used to sign <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawData"/>.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateJwtSecurityToken(System.String,System.String,System.Security.Claims.ClaimsIdentity,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SigningCredentials)">
            <summary>
            Creates a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>
            </summary>
            <param name="issuer">The issuer of the token.</param>
            <param name="audience">The audience for this token.</param>
            <param name="subject">The source of the <see cref="T:System.Security.Claims.Claim"/>(s) for this token.</param>
            <param name="notBefore">The notbefore time for this token.</param>
            <param name="expires">The expiration time for this token.</param>
            <param name="issuedAt">The issue time for this token.</param>
            <param name="signingCredentials">Contains cryptographic material for generating a signature.</param>
            <remarks>If <see cref="P:System.Security.Claims.ClaimsIdentity.Actor"/> is not null, then a claim { actort, 'value' } will be added to the payload. <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)"/> for details on how the value is created.
            <para>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtHeader"/> for details on how the HeaderParameters are added to the header.</para>
            <para>See <seealso cref="T:System.IdentityModel.Tokens.Jwt.JwtPayload"/> for details on how the values are added to the payload.</para>
            <para>Each <see cref="T:System.Security.Claims.Claim"/> on the <paramref name="subject"/> added will have <see cref="P:System.Security.Claims.Claim.Type"/> translated according to the mapping found in
            <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap"/>. Adding and removing to <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.OutboundClaimTypeMap"/> will affect the name component of the Json claim.</para>
            <para><see cref="M:Microsoft.IdentityModel.Tokens.SigningCredentials.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)"/> is used to sign <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawData"/>.</para>
            </remarks>
            <returns>A <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>.</returns>
            <exception cref="T:System.ArgumentException">If 'expires' &lt;= 'notBefore'.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateToken(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor)">
            <summary>
            Creates a Json Web Token (JWT).
            </summary>
            <param name="tokenDescriptor"> A <see cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor"/> that contains details of contents of the token.</param>
            <remarks><see cref="P:Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials"/> is used to sign <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawData"/>.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ReadJwtToken(System.String)">
            <summary>
            Convert string into <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>.
            </summary>
            <param name="token">A 'JSON Web Token' (JWT). May be signed as per 'JSON Web Signature' (JWS).</param>
            <returns>The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/></returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ReadToken(System.String)">
            <summary>
            Reads a token encoded in JSON Compact serialized format.
            </summary>
            <param name="token">A 'JSON Web Token' (JWT). May be signed as per 'JSON Web Signature' (JWS).</param>
            <remarks>
            The JWT must be encoded using Base64UrlEncoding of the UTF-8 representation of the JWT: Header, Payload and Signature.
            The contents of the JWT returned are not validated in any way, the token is simply decoded. Use ValidateToken to validate the JWT.
            </remarks>
            <returns>A <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/></returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateToken(System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters,Microsoft.IdentityModel.Tokens.SecurityToken@)">
            <summary>
            Reads and validates a token encoded in JSON Compact serialized format.
            </summary>
            <param name="token">A 'JSON Web Token' (JWT) that has been encoded as a JSON object. May be signed using 'JSON Web Signature' (JWS).</param>
            <param name="validationParameters">Contains validation parameters for the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>.</param>
            <param name="validatedToken">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> that was validated.</param>
            <exception cref="T:System.ArgumentNullException">'token' is null or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">'validationParameters' is null.</exception>
            <exception cref="T:System.ArgumentException">'token.Length' > <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.MaximumTokenSizeInBytes"/>.</exception>
            <returns>A <see cref="T:System.Security.Claims.ClaimsPrincipal"/> from the jwt. Does not include the header claims.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.WriteToken(Microsoft.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Writes the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> as a JSON Compact serialized format string.
            </summary>
            <param name="token"><see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> to serialize.</param>
            <remarks>
            <para>If the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningCredentials"/> are not null, the encoding will contain a signature.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'token' is null.</exception>
            <exception cref="T:System.ArgumentException">'token' is not a not <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>.</exception>
            <returns>The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> as a signed (if <see cref="T:Microsoft.IdentityModel.Tokens.SigningCredentials"/> exist) encoded string.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateEncodedSignature(System.String,Microsoft.IdentityModel.Tokens.SigningCredentials)">
            <summary>
            Produces a signature over the 'input'.
            </summary>
            <param name="input">String to be signed</param>
            <param name="signingCredentials">The <see cref="T:Microsoft.IdentityModel.Tokens.SigningCredentials"/> that contain crypto specs used to sign the token.</param>
            <returns>The bse64urlendcoded signature over the bytes obtained from UTF8Encoding.GetBytes( 'input' ).</returns>
            <exception cref="T:System.ArgumentNullException">'input' or 'signingCredentials' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateSignature(System.Byte[],System.Byte[],Microsoft.IdentityModel.Tokens.SecurityKey,System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Obtains a SignatureProvider and validates the signature.
            </summary>
            <param name="encodedBytes">bytes to validate.</param>
            <param name="signature">signature to compare against.</param>
            <param name="key"><see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey"/> to use.</param>
            <param name="algorithm">crypto algorithm to use.</param>
            <param name="validationParameters">priority will be given to <see cref="P:Microsoft.IdentityModel.Tokens.TokenValidationParameters.CryptoProviderFactory"/> over <see cref="P:Microsoft.IdentityModel.Tokens.SecurityKey.CryptoProviderFactory"/>.</param>
            <returns>true if signature is valid.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateSignature(System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Validates that the signature, if found and / or required is valid.
            </summary>
            <param name="token">A 'JSON Web Token' (JWT) that has been encoded as a JSON object. May be signed 
            using 'JSON Web Signature' (JWS).</param>
            <param name="validationParameters"><see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters"/> that contains signing keys.</param>
            <exception cref="T:System.ArgumentNullException">If 'token is null or whitespace.</exception>
            <exception cref="T:System.ArgumentNullException">If 'validationParameters is null.</exception>
            <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenValidationException">If a signature is not found and <see cref="P:Microsoft.IdentityModel.Tokens.TokenValidationParameters.RequireSignedTokens"/> is true.</exception>
            <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenSignatureKeyNotFoundException">If the 'token' has a key identifier and none of the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey"/>(s) provided result in a validated signature. 
            This can indicate that a key refresh is required.</exception>
            <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenInvalidSignatureException">If after trying all the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey"/>(s), none result in a validated signture AND the 'token' does not have a key identifier.</exception>
            <returns><see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> that has the signature validated if token was signed and <see cref="P:Microsoft.IdentityModel.Tokens.TokenValidationParameters.RequireSignedTokens"/> is true.</returns>
            <remarks><para>If the 'token' is signed, the signature is validated even if <see cref="P:Microsoft.IdentityModel.Tokens.TokenValidationParameters.RequireSignedTokens"/> is false.</para>
            <para>If the 'token' signature is validated, then the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningKey"/> will be set to the key that signed the 'token'.</para></remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateClaimsIdentity(System.IdentityModel.Tokens.Jwt.JwtSecurityToken,System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Creates a <see cref="T:System.Security.Claims.ClaimsIdentity"/> from a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>.
            </summary>
            <param name="jwt">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> to use as a <see cref="T:System.Security.Claims.Claim"/> source.</param>
            <param name="issuer">The value to set <see cref="P:System.Security.Claims.Claim.Issuer"/></param>
            <param name="validationParameters"> Contains parameters for validating the token.</param>
            <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity"/> containing the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.Claims"/>.</returns>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateActorValue(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Creates the 'value' for the actor claim: { actort, 'value' }
            </summary>
            <param name="actor"><see cref="T:System.Security.Claims.ClaimsIdentity"/> as actor.</param>
            <returns><see cref="T:System.String"/> representing the actor.</returns>
            <remarks>If <see cref="P:System.Security.Claims.ClaimsIdentity.BootstrapContext"/> is not null:
            <para>&#160;&#160;If 'type' is 'string', return as string.</para>
            <para>&#160;&#160;if 'type' is 'BootstrapContext' and 'BootstrapContext.SecurityToken' is 'JwtSecurityToken'</para>
            <para>&#160;&#160;&#160;&#160;if 'JwtSecurityToken.RawData' != null, return RawData.</para>        
            <para>&#160;&#160;&#160;&#160;else return <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.WriteToken(Microsoft.IdentityModel.Tokens.SecurityToken)"/>.</para>        
            <para>&#160;&#160;if 'BootstrapContext.Token' != null, return 'Token'.</para>
            <para>default: <see cref="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.WriteToken(Microsoft.IdentityModel.Tokens.SecurityToken)"/> new ( <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>( actor.Claims ).</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">'actor' is null.</exception>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateAudience(System.Collections.Generic.IEnumerable{System.String},System.IdentityModel.Tokens.Jwt.JwtSecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Determines if the audiences found in a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> are valid.
            </summary>
            <param name="audiences">The audiences found in the <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>.</param>
            <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> being validated.</param>
            <param name="validationParameters"><see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters"/> required for validation.</param>
            <remarks>See <see cref="M:Microsoft.IdentityModel.Tokens.Validators.ValidateAudience(System.Collections.Generic.IEnumerable{System.String},Microsoft.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)"/> for additional details.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateLifetime(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.IdentityModel.Tokens.Jwt.JwtSecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Validates the lifetime of a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/>.
            </summary>
            <param name="notBefore">The <see cref="T:System.DateTime"/> value of the 'nbf' claim if it exists in the 'jwt'.</param>
            <param name="expires">The <see cref="T:System.DateTime"/> value of the 'exp' claim if it exists in the 'jwt'.</param>
            <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> being validated.</param>
            <param name="validationParameters"><see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters"/> required for validation.</param>
            <remarks><see cref="M:Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(System.Nullable{System.DateTime},System.Nullable{System.DateTime},Microsoft.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)"/> for additional details.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateIssuer(System.String,System.IdentityModel.Tokens.Jwt.JwtSecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Determines if an issuer found in a <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> is valid.
            </summary>
            <param name="issuer">The issuer to validate</param>
            <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> that is being validated.</param>
            <param name="validationParameters"><see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters"/> required for validation.</param>
            <returns>The issuer to use when creating the <see cref="T:System.Security.Claims.Claim"/>(s) in the <see cref="T:System.Security.Claims.ClaimsIdentity"/>.</returns>
            <remarks><see cref="M:Microsoft.IdentityModel.Tokens.Validators.ValidateIssuer(System.String,Microsoft.IdentityModel.Tokens.SecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)"/> for additional details.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ResolveIssuerSigningKey(System.String,System.IdentityModel.Tokens.Jwt.JwtSecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Returns a <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey"/> to use when validating the signature of a token.
            </summary>
            <param name="token">The <see cref="T:System.String"/> representation of the token that is being validated.</param>
            <param name="securityToken">The <SecurityToken> that is being validated.</SecurityToken></param>
            <param name="validationParameters">A <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters"/>  required for validation.</param>
            <returns>Returns a <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey"/> to use for signature validation.</returns>
            <remarks>If key fails to resolve, then null is returned</remarks>
        </member>
        <member name="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.SetDefaultTimesOnTokenCreation">
            <summary>
            Gets or sets a bool that controls if token creation will set default 'exp', 'nbf' and 'iat' if not specified.
            </summary>
            <remarks>See: <see cref="F:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultTokenLifetimeInMinutes"/>, <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.TokenLifetimeInMinutes"/> for defaults and configuration.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateIssuerSecurityKey(Microsoft.IdentityModel.Tokens.SecurityKey,System.IdentityModel.Tokens.Jwt.JwtSecurityToken,Microsoft.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Validates the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningKey"/> is an expected value.
            </summary>
            <param name="securityKey">The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey"/> that signed the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityToken"/>.</param>
            <param name="securityToken">The <see cref="T:System.IdentityModel.Tokens.Jwt.JwtSecurityToken"/> to validate.</param>
            <param name="validationParameters">The current <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters"/>.</param>
            <remarks>If the <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningKey"/> is a <see cref="T:Microsoft.IdentityModel.Tokens.X509SecurityKey"/> then the X509Certificate2 will be validated using the CertificateValidator.</remarks>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,Microsoft.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Serializes to XML a token of the type handled by this instance.
            </summary>
            <param name="writer">The XML writer.</param>
            <param name="token">A token of type <see cref="P:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.TokenType"/>.</param>
        </member>
        <member name="M:System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ReadToken(System.Xml.XmlReader,Microsoft.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Deserializes token with the provided <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters"/>.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/>.</param>
            <param name="validationParameters">The current <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters"/>.</param>
            <returns>The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityToken"/></returns>
        </member>
        <member name="T:System.IdentityModel.Tokens.Jwt.LogMessages">
            <summary>
            Log messages and codes
            </summary>
        </member>
    </members>
</doc>
